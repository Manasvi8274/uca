when do conponent re render:-
    state change, parent re-render then child re-render , prop
component:-
    function , reusablee code
why root element :-
    bcs root make full html to react make a root element which is controlled by react
why react:-
    simplified,create a function only html can be done by react,automatically re reender the component
why react instead of angular:-
    if use angular only use angular no other but react can be molded to different language easily


command to use :-
    1)npm create vite
    2)project name and choose react and js
    3)change directory
    4)npm install
    //to run
    5)npm run dev

to change port :- go to line no. 7 in package.json in vite then add --port portnumber

if we use .js or .jsx there is no impact as they bot are same for react but only .jsx has to be converted to .js

NOTE  --- : if we use small starting character it does not work but if we do big case starting then it works
            but if we create a file with small the when importing in anyfile use "as big case alphabet starter
usestates to change the render in react
state = current state ie state at whichc web page is currently working


we use two place to save data :-
    1) use state(to save data) - triggers re-render
    2) useref() - no trigger re-renderuse for mutable objects
---------------------------------------------------------------------------------------------
27_09_2024:::::::::::::::::::::::::::::::::::::::::::::::::
vite to optimese the server rendering:
    1)build part of vite converts the jsx to javascript , css , html etc;
    2)build part of vite also host the build port
    2)doesnt re redner the entire page but the changes to previous dom 
    (after rendering page one time vite creates a virtual dom , in case of re rendering of page it only renders the change(delta) in actual dom to virtual dom then pushes the virtual dom and renders it)
    why virtual dom:-
        1)(dom to dom compile)
        2)(combines the all updates into a batch)

USESTATE() to resave data;

USEEFFECT();(to moniotr re rendering)
    parameter 1 = effect to re render
    parameter 2 = dependency which part depends
    never create open components,var,any data
    only uuse usestate aor useref
to download bootstrap:- npm i bootstrap@5.3.3
--------------------------------------------------------------------------------------------------------------------------

28_09_2024 :::::::::::::::::::::::::::::::::::::::::::::::::::::
bootstraping the application is just inititlising the application

hooks:- any part which is parsed as function only runs on the client side , we cannot us euseeffect,usestate inside a function , any hool cannot be used inside a function can only be used in custom hooks

children  - any components

primary work of react  -  manage component (anything else we can make different lib) , componenet re render
/////props 
to send data to component  - props a only way

no refresh in single page app 
use bootstrap instead of making new css unless needed as css peaople requirement is very less

custom hools - hooks name start from "use" keyword and can accomodate default hooks 
-----------------------------------------------------------------------------------------------------------------
Synthetics event is mostly a wrapper on default html events 
-------------------------------------------------------------------------------------------------------------
to install json server - npm i -g json-server
we need to make sure both server on different ports;

no we make a db.json file with arrays,objects in it ,
now we got to sign in and check from validation and if true then call fetch application
    fetch("https://localhost:3001/posts/user") where user is the array which we want to change
    fetch("https://localhost:3001/posts/user"{
        method : "POST",
        body : JSON.Stringify(formvaluesobject)
    })
    if(response.ok && (response.status == 200 || response.status == 200)){
        console.log("submit success");
    }
    else{
        alert();
    }

response 200 = success , 201 = created
